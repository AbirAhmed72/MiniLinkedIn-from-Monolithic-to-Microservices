version: '3.8'

services:

  nginx:
    build:
      context: ./nginx
    container_name: nginx_container
    ports:
      - "80:80"
    restart: unless-stopped
    networks:
      - amar_network
    volumes:
      - ./mini-linkedin-final-frontend/build:/var/www/html
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - user_service
      - post_service
      - notification_service
      # - frontend_service ##fahad rakhenai

  user_service:
    build:
      context: ./user_service
    container_name: user_service_container
    ports:
      - "8000:8000"
    restart: unless-stopped
    networks:
      - amar_network
    depends_on:
      - user_db
    environment:
      DATABASE_URL: postgresql://postgres:1234@user_db:5432/User
    # command: ["./wait-for-postgres.sh", "user_db", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    # volumes:
    #   - ./wait-for-postgres.sh:/app/wait-for-postgres.sh  # Mount the script into the container

  user_db:
    image: postgres:16.0
    container_name: user_db_container
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: User
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - amar_network
    volumes:
      - ./init/user_service_init.sql:/docker-entrypoint-initdb.d/user_service_init.sql
      - user_db_data:/var/lib/postgresql/data

  post_service:
    build:
      context: ./post_service
    container_name: post_service_container
    ports:
      - "8001:8001"
    restart: unless-stopped
    networks:
      - amar_network
    depends_on:
      - post_db
      # - user_db
      #!!
      - notification_db
      # - minio
      #!!
    environment:
      DATABASE_URL: postgresql://postgres:1234@post_db:5432/Post
    # command: ["./wait-for-postgres.sh", "post_db", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8001"]
    # volumes:
    #   - ./wait-for-postgres.sh:/app/wait-for-postgres.sh

  post_db:
    image: postgres:16.0
    container_name: post_db_container
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: Post
    ports:
      - "5433:5432"
    restart: unless-stopped
    networks:
      - amar_network
    volumes:
      - ./init/post_service_init.sql:/docker-entrypoint-initdb.d/post_service_init.sql
      - post_db_data:/var/lib/postgresql/data

  notification_service:
    build:
      context: ./notification_service
    container_name: notification_service_container
    ports:
      - "8002:8002"
    restart: unless-stopped
    networks:
      - amar_network
    depends_on:
      - notification_db
    environment:
      DATABASE_URL: postgresql://postgres:1234@notification_db:5432/Notification
    # command: ["./wait-for-postgres.sh", "notification_db", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8002"]
    # volumes:
    #   - ./wait-for-postgres.sh:/app/wait-for-postgres.sh

  notification_db:
    image: postgres:16.0
    container_name: notification_db_container
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: Notification
    ports:
      - "5434:5432"
    restart: unless-stopped
    networks:
      - amar_network
    volumes:
      - ./init/notification_service_init.sql:/docker-entrypoint-initdb.d/notification_service_init.sql
      - notification_db_data:/var/lib/postgresql/data

  minio:
    image: minio/minio:latest
    container_name: minio_container
    ports:
      - "9000:9000"
      - "9001:9001"
    restart: unless-stopped
    environment:
      # - MINIO_ENDPOINT=minio
      - MINIO_ROOT_USER=Abir
      - MINIO_ROOT_PASSWORD=12345678
      - MINIO_SECURE=False

    networks:
      - amar_network
    command: server --console-address ":9001" /data
    # command: server --address 0.0.0.0:9000 /data
    volumes:
      - minio_storage:/data

  # frontend_service:  # Frontend service configuration starts here
  #   build:
  #     context: ./mini-linkedin-final-frontend  # Path to the frontend build files
  #   container_name: frontend_container
  #   ports:
  #     - "3000:3000"  # Assuming your frontend is running on port 80 inside the container
  #   restart: unless-stopped
  #   networks:
  #     - amar_network

volumes:
  user_db_data:
  post_db_data:
  notification_db_data:
  minio_storage:

networks:
  amar_network:
    driver: bridge
    external: true
